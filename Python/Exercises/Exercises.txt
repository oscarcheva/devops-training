Beginner Exercises
FizzBuzz

Print numbers from 1 to 100.
Replace multiples of 3 with "Fizz," multiples of 5 with "Buzz," and multiples of both with "FizzBuzz."
Palindrome Checker

Write a function that checks if a given string is a palindrome (e.g., "racecar" is a palindrome, but "hello" is not).
Factorial Calculator

Create a function to calculate the factorial of a number (n!).
Reverse a String

Write a function that reverses a string without using slicing ([::-1]).
Sum of Digits

Write a function that takes a number and returns the sum of its digits.
Example: 123 → 1 + 2 + 3 = 6
Find the Missing Number

Given a list of numbers from 1 to n with one number missing, find the missing number.
Example: [1, 2, 4, 5] → 3
Count Vowels

Write a function that counts the number of vowels in a given string.

Intermediate Exercises
Prime Numbers

Write a function to check if a number is prime.
Extend it to print all prime numbers up to a given number n.
Anagram Checker

Write a function to check if two strings are anagrams of each other.
Example: "listen" and "silent" are anagrams.
Find Duplicates in a List

Write a function that finds all duplicate elements in a list.
Example: [1, 2, 3, 4, 2, 5, 1] → [1, 2]
Armstrong Number

Check if a number is an Armstrong number.
Example: 153 → 1³ + 5³ + 3³ = 153
Fibonacci Sequence

Generate the first n numbers in the Fibonacci sequence.
Sorting Algorithm

Implement a basic sorting algorithm, like Bubble Sort or Insertion Sort, from scratch.
Caesar Cipher

Write a function to encrypt and decrypt messages using a Caesar cipher.
Longest Word in a Sentence

Write a function to find the longest word in a sentence

Advanced Exercises
Sudoku Validator

Write a function to check if a 9x9 Sudoku board is valid (rows, columns, and subgrids must contain unique numbers from 1-9).
Two-Sum Problem

Given an array of integers and a target sum, return the indices of two numbers that add up to the target.
Example: [2, 7, 11, 15], target=9 → [0, 1]
Matrix Transpose

Write a function to transpose a given 2D matrix.
Example: [[1, 2], [3, 4]] → [[1, 3], [2, 4]]
Merge Intervals

Given a list of intervals, merge overlapping intervals.
Example: [(1, 3), (2, 6), (8, 10)] → [(1, 6), (8, 10)]
Word Frequency Counter

Write a function to count the frequency of each word in a given string.
Example: "the cat in the hat" → {'the': 2, 'cat': 1, 'in': 1, 'hat': 1}
String Permutations

Write a function to generate all permutations of a given string.
Example: "abc" → ["abc", "acb", "bac", "bca", "cab", "cba"]
Balanced Parentheses

Write a function to check if a string has balanced parentheses.
Example: "((a+b)*c)" → True, "((a+b))(" → False
Knapsack Problem

Solve the 0/1 Knapsack problem using recursion or dynamic programming.
Maze Solver

Write a function to find a path through a 2D maze from a starting point to an endpoint.
Game of Life

Implement Conway's Game of Life for an n x n grid.
Bonus Challenges
Binary Search

Implement a binary search algorithm to find an element in a sorted array.
JSON Parser

Write a function to parse a JSON string into a Python dictionary.
Flatten Nested Lists

Write a function to flatten a deeply nested list.
Example: [1, [2, [3, 4]], 5] → [1, 2, 3, 4, 5]
Stock Profit Calculator

Given an array of stock prices, calculate the maximum profit by buying and selling once.
Example: [7, 1, 5, 3, 6, 4] → 5
LruCache Implementation

Implement an LRU (Least Recently Used) Cache using a dictionary and a doubly linked list.